# I want to make the workflow that auto update the tag on Github
# I can choose major, minor, patch, and then increase the corresponding version number for the add tag

name: version_up
on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Select the type of version bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - 'major'
          - 'minor'
          - 'patch'

jobs:
  generate_new_version:
    runs-on: macos-13
    outputs:
      new_version: ${{ steps.generate_new_version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - id: generate_new_version
        name: Version Up
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          VERSION_TYPE=${{ inputs.version_type }}
          VERSION_MAJOR=$(echo $VERSION | cut -d. -f1)
          VERSION_MINOR=$(echo $VERSION | cut -d. -f2)
          VERSION_PATCH=$(echo $VERSION | cut -d. -f3)
          if [ "$VERSION_TYPE" == "major" ]; then
            VERSION_MAJOR=$((VERSION_MAJOR + 1))
            VERSION_MINOR=0
            VERSION_PATCH=0
          elif [ "$VERSION_TYPE" == "minor" ]; then
            VERSION_MINOR=$((VERSION_MINOR + 1))
            VERSION_PATCH=0
          elif [ "$VERSION_TYPE" == "patch" ]; then
            VERSION_PATCH=$((VERSION_PATCH + 1))
          fi
          NEW_VERSION="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
          echo "::set-output name=new_version::${NEW_VERSION}"

  create_tag:
    needs: generate_new_version
    runs-on: macos-13
    env:
      new_version: ${{ needs.generate_new_version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create Tag
        shell: bash
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a ${{ env.new_version }} -m "Version ${{ env.new_version }}"
          git push origin ${{ env.new_version }}
  build:
    needs: [generate_new_version]
    runs-on: macos-13
    strategy:
      matrix:
        arch: [arm64, amd64]
    env:
      new_version: ${{ needs.generate_new_version.outputs.new_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
      - name: Build
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          go build -ldflags="-s -w -X main.revision=${{ env.new_version }}" -o mdefaults .
          zip -r mdefaults-${{ matrix.arch }}-${{ env.new_version }}.zip mdefaults
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: mdefaults-${{ matrix.arch }}-${{ env.new_version }}
          path: mdefaults-*.zip
  release:
    needs: [build, create_tag, generate_new_version]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.generate_new_version.outputs.new_version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          generate_release_notes: true
          files: mdefaults-*/*
